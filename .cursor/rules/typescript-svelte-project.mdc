---
description: 
globs: 
alwaysApply: false
---
# TypeScript SvelteKit Gallery Project Rules

## Project Overview
This is a personal gallery website (Fantasia) built with SvelteKit and TypeScript. It's an Instagram-like photo sharing platform deployed on Vercel with Supabase backend.

## Tech Stack
- **Frontend**: SvelteKit + TypeScript
- **Backend**: Supabase (PostgreSQL + Storage)
- **Styling**: Tailwind CSS
- **Deployment**: Vercel
- **Domain**: fantasia.org.cn

## Code Standards

### Language Requirements
- All code comments and logs MUST be in English only, even if prompts are in Chinese
- Use TypeScript for all new files (`.ts` for utilities, `<script lang="ts">` for Svelte components)
- Follow strict TypeScript configuration defined in [tsconfig.json](mdc:tsconfig.json)

### File Structure Rules
- Keep single files under 200 lines - refactor into multiple modules if exceeded
- Keep single functions under 100 lines - split into multiple functions if needed
- Don't modify unrelated logic when making specific changes

### API and URL Conventions
- Use hyphens "-" in URLs instead of underscores "_" unless required by naming standards
- Follow API best practices - suggest improvements for non-standard developer designs
- Update README if modifications require documentation changes

## TypeScript Migration Best Practices

### Migration Sequence (CRITICAL ORDER)
**Follow this exact sequence to avoid breaking changes:**

1. **Phase 1: Configuration Setup**
   ```bash
   # Update package.json with TypeScript dependencies
   # Create tsconfig.json (let SvelteKit generate base first)
   # Update svelte.config.js for TypeScript support
   npm run dev # Let SvelteKit generate .svelte-kit/tsconfig.json
   ```

2. **Phase 2: Type Definitions** 
   ```bash
   # Create src/app.d.ts
   # Create src/lib/types/database.ts with all interfaces
   # Define component prop types
   ```

3. **Phase 3: Update Imports BEFORE Conversion**
   ```bash
   # Update ALL import paths to remove .js extensions
   # Fix ALL component import references
   # Test that imports resolve correctly
   ```

4. **Phase 4: Convert Files Incrementally**
   ```bash
   # Convert .js to .ts files one by one
   # Add TypeScript types to each file
   # Test after each conversion
   ```

5. **Phase 5: Clean Up and Validate**
   ```bash
   # Remove old .js files only after all imports are fixed
   # Clean up unused code and CSS
   # Run full type checking and accessibility audit
   ```

### Critical Error Prevention
```typescript
// ✅ DO: Update imports first, then convert files
// 1. Change all imports from '.js' to no extension
import { albums } from '$lib/stores/albums'; // Remove .js

// 2. Then convert albums.js to albums.ts
// 3. Add TypeScript types

// ❌ DON'T: Delete .js files before fixing imports
// This causes "module not found" errors
```

### SSR Compatibility Checklist
```typescript
// ✅ Always check for browser environment
if (typeof document !== 'undefined') {
  document.addEventListener('keydown', handler);
}

// ✅ Use onMount for browser-only code
onMount(() => {
  if (typeof window !== 'undefined') {
    // Browser-only logic
  }
});

// ❌ Never use browser APIs directly in component top-level
document.addEventListener('keydown', handler); // SSR will fail
```

## Project Structure

### Core Configuration
- [package.json](mdc:package.json) - Dependencies and scripts with TypeScript support
- [tsconfig.json](mdc:tsconfig.json) - Strict TypeScript configuration
- [svelte.config.js](mdc:svelte.config.js) - SvelteKit config with Vercel adapter
- [tailwind.config.js](mdc:tailwind.config.js) - Custom gallery color scheme
- [vite.config.js](mdc:vite.config.js) - Build optimization

### Type Definitions
- [src/app.d.ts](mdc:src/app.d.ts) - SvelteKit global types
- [src/lib/types/database.ts](mdc:src/lib/types/database.ts) - Database models and component prop types

### Backend Integration
- [src/lib/utils/supabase.ts](mdc:src/lib/utils/supabase.ts) - Supabase client and database functions
- [database/schema.sql](mdc:database/schema.sql) - Database schema with RLS policies

### State Management
- [src/lib/stores/albums.ts](mdc:src/lib/stores/albums.ts) - Album data management with TypeScript
- [src/lib/stores/lightbox.ts](mdc:src/lib/stores/lightbox.ts) - Lightbox state management with TypeScript

### Utilities
- [src/lib/utils/imageHelpers.ts](mdc:src/lib/utils/imageHelpers.ts) - Image processing utilities
- [src/lib/utils/supabase.ts](mdc:src/lib/utils/supabase.ts) - Database operations and image optimization

### Components
- [src/lib/components/AlbumGrid.svelte](mdc:src/lib/components/AlbumGrid.svelte) - Instagram-style album grid
- [src/lib/components/PhotoCard.svelte](mdc:src/lib/components/PhotoCard.svelte) - Individual photo cards with lazy loading
- [src/lib/components/ImageLightbox.svelte](mdc:src/lib/components/ImageLightbox.svelte) - Full-screen image viewer
- [src/lib/components/Navigation.svelte](mdc:src/lib/components/Navigation.svelte) - Site navigation

### Pages
- [src/routes/+layout.svelte](mdc:src/routes/+layout.svelte) - Main layout with navigation and lightbox
- [src/routes/+page.svelte](mdc:src/routes/+page.svelte) - Homepage with hero and album grid
- [src/routes/album/[slug]/+page.svelte](mdc:src/routes/album/[slug]/+page.svelte) - Album detail page
- [src/routes/about/+page.svelte](mdc:src/routes/about/+page.svelte) - About page

## Development Commands

```bash
# Development
npm run dev

# TypeScript checking
npm run check
npm run check:watch
npm run type-check

# Building
npm run build
npm run preview
```

## Quality Assurance During Migration

### Testing Protocol
```bash
# After each major change, run:
npm run check      # TypeScript validation
npm run dev        # Test SSR and client-side
# Manual testing:  # Check accessibility
# Browser console: # Check for runtime errors
```

### Common Warning Fixes
```typescript
// Fix Vite plugin warnings:
// 1. Remove unused CSS selectors
// 2. Fix A11y violations with proper interactive elements
// 3. Add SSR checks for browser APIs
// 4. Clean up unused imports and variables
```

## Key Features
- Responsive Instagram-like photo grid
- Full-screen lightbox with zoom/pan/navigation
- Image optimization with multiple formats
- Lazy loading and performance optimization
- SEO optimization with meta tags
- Accessibility features (ARIA, keyboard navigation)

## Best Practices
- Always use TypeScript types from [src/lib/types/database.ts](mdc:src/lib/types/database.ts)
- Import utilities without file extensions (e.g., `from '$lib/utils/supabase'`)
- Use proper error handling in async functions
- Follow accessibility guidelines in components
- Optimize images using Supabase transformations
- Test responsive design on multiple breakpoints
- **CRITICAL**: Always test SSR compatibility when using browser APIs
- **CRITICAL**: Follow proper migration sequence to avoid breaking changes
- **CRITICAL**: Update all imports before converting files to TypeScript
